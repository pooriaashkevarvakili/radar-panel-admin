/* tslint:disable */
/* eslint-disable */
/**
 * Accommodation Service - Accommodation Owner APIs
 * Api Documentation for Accommodation Owner Users
 *
 * The version of the OpenAPI document: Accommodation Owner
 * Contact: amir.hossein.khalouei@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccommodationsResponseDtoArrayResponsePackage } from '../model';
// @ts-ignore
import { CommentDetailsDtoPaginationResultResponsePackage } from '../model';
// @ts-ignore
import { CommentReportResponseDtoResponsePackage } from '../model';
// @ts-ignore
import { CommentSourceDetailsDtoIEnumerableResponsePackage } from '../model';
// @ts-ignore
import { StringIEnumerableResponsePackage } from '../model';
/**
 * AccommodationsApi - axios parameter creator
 * @export
 */
export const AccommodationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/accommodation-owner/accommodations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentSourcesGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationOwnerAccommodationsIdCommentSourcesGet', 'id', id)
            const localVarPath = `/api/accommodation-owner/accommodations/{id}/comment-sources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [score] 
         * @param {number} [source] 
         * @param {string} [sortBy] 
         * @param {string} [sortDirection] 
         * @param {string} [text] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentsGet: async (id: number, startDate?: string, endDate?: string, score?: string, source?: number, sortBy?: string, sortDirection?: string, text?: string, pageIndex?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationOwnerAccommodationsIdCommentsGet', 'id', id)
            const localVarPath = `/api/accommodation-owner/accommodations/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }

            if (score !== undefined) {
                localVarQueryParameter['score'] = score;
            }

            if (source !== undefined) {
                localVarQueryParameter['source'] = source;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortDirection !== undefined) {
                localVarQueryParameter['sortDirection'] = sortDirection;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (pageIndex !== undefined) {
                localVarQueryParameter['pageIndex'] = pageIndex;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentsReportGet: async (id: number, startDate?: string, endDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationOwnerAccommodationsIdCommentsReportGet', 'id', id)
            const localVarPath = `/api/accommodation-owner/accommodations/{id}/comments/report`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdKeywordsGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiAccommodationOwnerAccommodationsIdKeywordsGet', 'id', id)
            const localVarPath = `/api/accommodation-owner/accommodations/{id}/keywords`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AccommodationsApi - functional programming interface
 * @export
 */
export const AccommodationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AccommodationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationOwnerAccommodationsGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccommodationsResponseDtoArrayResponsePackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationOwnerAccommodationsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationOwnerAccommodationsIdCommentSourcesGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentSourceDetailsDtoIEnumerableResponsePackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationOwnerAccommodationsIdCommentSourcesGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [score] 
         * @param {number} [source] 
         * @param {string} [sortBy] 
         * @param {string} [sortDirection] 
         * @param {string} [text] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationOwnerAccommodationsIdCommentsGet(id: number, startDate?: string, endDate?: string, score?: string, source?: number, sortBy?: string, sortDirection?: string, text?: string, pageIndex?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentDetailsDtoPaginationResultResponsePackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationOwnerAccommodationsIdCommentsGet(id, startDate, endDate, score, source, sortBy, sortDirection, text, pageIndex, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationOwnerAccommodationsIdCommentsReportGet(id: number, startDate?: string, endDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentReportResponseDtoResponsePackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationOwnerAccommodationsIdCommentsReportGet(id, startDate, endDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAccommodationOwnerAccommodationsIdKeywordsGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StringIEnumerableResponsePackage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccommodationOwnerAccommodationsIdKeywordsGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AccommodationsApi - factory interface
 * @export
 */
export const AccommodationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AccommodationsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsGet(options?: any): AxiosPromise<AccommodationsResponseDtoArrayResponsePackage> {
            return localVarFp.apiAccommodationOwnerAccommodationsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentSourcesGet(id: number, options?: any): AxiosPromise<CommentSourceDetailsDtoIEnumerableResponsePackage> {
            return localVarFp.apiAccommodationOwnerAccommodationsIdCommentSourcesGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {string} [score] 
         * @param {number} [source] 
         * @param {string} [sortBy] 
         * @param {string} [sortDirection] 
         * @param {string} [text] 
         * @param {number} [pageIndex] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentsGet(id: number, startDate?: string, endDate?: string, score?: string, source?: number, sortBy?: string, sortDirection?: string, text?: string, pageIndex?: number, pageSize?: number, options?: any): AxiosPromise<CommentDetailsDtoPaginationResultResponsePackage> {
            return localVarFp.apiAccommodationOwnerAccommodationsIdCommentsGet(id, startDate, endDate, score, source, sortBy, sortDirection, text, pageIndex, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdCommentsReportGet(id: number, startDate?: string, endDate?: string, options?: any): AxiosPromise<CommentReportResponseDtoResponsePackage> {
            return localVarFp.apiAccommodationOwnerAccommodationsIdCommentsReportGet(id, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAccommodationOwnerAccommodationsIdKeywordsGet(id: number, options?: any): AxiosPromise<StringIEnumerableResponsePackage> {
            return localVarFp.apiAccommodationOwnerAccommodationsIdKeywordsGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAccommodationOwnerAccommodationsIdCommentSourcesGet operation in AccommodationsApi.
 * @export
 * @interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentSourcesGetRequest
 */
export interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentSourcesGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentSourcesGet
     */
    readonly id: number
}

/**
 * Request parameters for apiAccommodationOwnerAccommodationsIdCommentsGet operation in AccommodationsApi.
 * @export
 * @interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGetRequest
 */
export interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly endDate?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly score?: string

    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly source?: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly sortBy?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly sortDirection?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly text?: string

    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly pageIndex?: number

    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGet
     */
    readonly pageSize?: number
}

/**
 * Request parameters for apiAccommodationOwnerAccommodationsIdCommentsReportGet operation in AccommodationsApi.
 * @export
 * @interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGetRequest
 */
export interface AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGet
     */
    readonly id: number

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGet
     */
    readonly startDate?: string

    /**
     * 
     * @type {string}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGet
     */
    readonly endDate?: string
}

/**
 * Request parameters for apiAccommodationOwnerAccommodationsIdKeywordsGet operation in AccommodationsApi.
 * @export
 * @interface AccommodationsApiApiAccommodationOwnerAccommodationsIdKeywordsGetRequest
 */
export interface AccommodationsApiApiAccommodationOwnerAccommodationsIdKeywordsGetRequest {
    /**
     * 
     * @type {number}
     * @memberof AccommodationsApiApiAccommodationOwnerAccommodationsIdKeywordsGet
     */
    readonly id: number
}

/**
 * AccommodationsApi - object-oriented interface
 * @export
 * @class AccommodationsApi
 * @extends {BaseAPI}
 */
export class AccommodationsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationsApi
     */
    public apiAccommodationOwnerAccommodationsGet(options?: any) {
        return AccommodationsApiFp(this.configuration).apiAccommodationOwnerAccommodationsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentSourcesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationsApi
     */
    public apiAccommodationOwnerAccommodationsIdCommentSourcesGet(requestParameters: AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentSourcesGetRequest, options?: any) {
        return AccommodationsApiFp(this.configuration).apiAccommodationOwnerAccommodationsIdCommentSourcesGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationsApi
     */
    public apiAccommodationOwnerAccommodationsIdCommentsGet(requestParameters: AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsGetRequest, options?: any) {
        return AccommodationsApiFp(this.configuration).apiAccommodationOwnerAccommodationsIdCommentsGet(requestParameters.id, requestParameters.startDate, requestParameters.endDate, requestParameters.score, requestParameters.source, requestParameters.sortBy, requestParameters.sortDirection, requestParameters.text, requestParameters.pageIndex, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationsApi
     */
    public apiAccommodationOwnerAccommodationsIdCommentsReportGet(requestParameters: AccommodationsApiApiAccommodationOwnerAccommodationsIdCommentsReportGetRequest, options?: any) {
        return AccommodationsApiFp(this.configuration).apiAccommodationOwnerAccommodationsIdCommentsReportGet(requestParameters.id, requestParameters.startDate, requestParameters.endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AccommodationsApiApiAccommodationOwnerAccommodationsIdKeywordsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccommodationsApi
     */
    public apiAccommodationOwnerAccommodationsIdKeywordsGet(requestParameters: AccommodationsApiApiAccommodationOwnerAccommodationsIdKeywordsGetRequest, options?: any) {
        return AccommodationsApiFp(this.configuration).apiAccommodationOwnerAccommodationsIdKeywordsGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}
