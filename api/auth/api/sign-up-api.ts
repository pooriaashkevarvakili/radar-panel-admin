/* tslint:disable */
/* eslint-disable */
/**
 * User
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: User
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SignUpHotelRequestDto } from '../model';
// @ts-ignore
import { SignUpRequestDto } from '../model';
/**
 * SignUpApi - axios parameter creator
 * @export
 */
export const SignUpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignUpHotelRequestDto} [signUpHotelRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpAccomodationOwnerPost: async (signUpHotelRequestDto?: SignUpHotelRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SignUp/Accomodation-owner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpHotelRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPhoneNumberPhoneNumberIsAvailableGet: async (phoneNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('apiSignUpPhoneNumberPhoneNumberIsAvailableGet', 'phoneNumber', phoneNumber)
            const localVarPath = `/api/SignUp/PhoneNumber/{phoneNumber}/IsAvailable`
                .replace(`{${"phoneNumber"}}`, encodeURIComponent(String(phoneNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPost: async (signUpRequestDto?: SignUpRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SignUp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SignUpApi - functional programming interface
 * @export
 */
export const SignUpApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SignUpApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SignUpHotelRequestDto} [signUpHotelRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSignUpAccomodationOwnerPost(signUpHotelRequestDto?: SignUpHotelRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSignUpAccomodationOwnerPost(signUpHotelRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSignUpPost(signUpRequestDto?: SignUpRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSignUpPost(signUpRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SignUpApi - factory interface
 * @export
 */
export const SignUpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SignUpApiFp(configuration)
    return {
        /**
         * 
         * @param {SignUpHotelRequestDto} [signUpHotelRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpAccomodationOwnerPost(signUpHotelRequestDto?: SignUpHotelRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiSignUpAccomodationOwnerPost(signUpHotelRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} phoneNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiSignUpPhoneNumberPhoneNumberIsAvailableGet(phoneNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignUpRequestDto} [signUpRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSignUpPost(signUpRequestDto?: SignUpRequestDto, options?: any): AxiosPromise<void> {
            return localVarFp.apiSignUpPost(signUpRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSignUpAccomodationOwnerPost operation in SignUpApi.
 * @export
 * @interface SignUpApiApiSignUpAccomodationOwnerPostRequest
 */
export interface SignUpApiApiSignUpAccomodationOwnerPostRequest {
    /**
     * 
     * @type {SignUpHotelRequestDto}
     * @memberof SignUpApiApiSignUpAccomodationOwnerPost
     */
    readonly signUpHotelRequestDto?: SignUpHotelRequestDto
}

/**
 * Request parameters for apiSignUpPhoneNumberPhoneNumberIsAvailableGet operation in SignUpApi.
 * @export
 * @interface SignUpApiApiSignUpPhoneNumberPhoneNumberIsAvailableGetRequest
 */
export interface SignUpApiApiSignUpPhoneNumberPhoneNumberIsAvailableGetRequest {
    /**
     * 
     * @type {string}
     * @memberof SignUpApiApiSignUpPhoneNumberPhoneNumberIsAvailableGet
     */
    readonly phoneNumber: string
}

/**
 * Request parameters for apiSignUpPost operation in SignUpApi.
 * @export
 * @interface SignUpApiApiSignUpPostRequest
 */
export interface SignUpApiApiSignUpPostRequest {
    /**
     * 
     * @type {SignUpRequestDto}
     * @memberof SignUpApiApiSignUpPost
     */
    readonly signUpRequestDto?: SignUpRequestDto
}

/**
 * SignUpApi - object-oriented interface
 * @export
 * @class SignUpApi
 * @extends {BaseAPI}
 */
export class SignUpApi extends BaseAPI {
    /**
     * 
     * @param {SignUpApiApiSignUpAccomodationOwnerPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public apiSignUpAccomodationOwnerPost(requestParameters: SignUpApiApiSignUpAccomodationOwnerPostRequest = {}, options?: any) {
        return SignUpApiFp(this.configuration).apiSignUpAccomodationOwnerPost(requestParameters.signUpHotelRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpApiApiSignUpPhoneNumberPhoneNumberIsAvailableGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public apiSignUpPhoneNumberPhoneNumberIsAvailableGet(requestParameters: SignUpApiApiSignUpPhoneNumberPhoneNumberIsAvailableGetRequest, options?: any) {
        return SignUpApiFp(this.configuration).apiSignUpPhoneNumberPhoneNumberIsAvailableGet(requestParameters.phoneNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpApiApiSignUpPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignUpApi
     */
    public apiSignUpPost(requestParameters: SignUpApiApiSignUpPostRequest = {}, options?: any) {
        return SignUpApiFp(this.configuration).apiSignUpPost(requestParameters.signUpRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
