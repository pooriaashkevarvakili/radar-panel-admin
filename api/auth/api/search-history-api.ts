/* tslint:disable */
/* eslint-disable */
/**
 * User
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: User
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FlightSearchHistoryRequest } from '../model';
// @ts-ignore
import { HotelSearchHistoryRequest } from '../model';
// @ts-ignore
import { ResortSearchHistoryRequest } from '../model';
/**
 * SearchHistoryApi - axios parameter creator
 * @export
 */
export const SearchHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryFlightPost: async (flightSearchHistoryRequest?: FlightSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/flight`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(flightSearchHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryHotelPost: async (hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/hotel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hotelSearchHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryResortPost: async (resortSearchHistoryRequest?: ResortSearchHistoryRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/SearchHistory/resort`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resortSearchHistoryRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchHistoryApi - functional programming interface
 * @export
 */
export const SearchHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryFlightPost(flightSearchHistoryRequest?: FlightSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchHistoryFlightPost(flightSearchHistoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryHotelPost(hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchHistoryHotelPost(hotelSearchHistoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSearchHistoryResortPost(resortSearchHistoryRequest?: ResortSearchHistoryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSearchHistoryResortPost(resortSearchHistoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchHistoryApi - factory interface
 * @export
 */
export const SearchHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {FlightSearchHistoryRequest} [flightSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryFlightPost(flightSearchHistoryRequest?: FlightSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSearchHistoryFlightPost(flightSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {HotelSearchHistoryRequest} [hotelSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryHotelPost(hotelSearchHistoryRequest?: HotelSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSearchHistoryHotelPost(hotelSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ResortSearchHistoryRequest} [resortSearchHistoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSearchHistoryResortPost(resortSearchHistoryRequest?: ResortSearchHistoryRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiSearchHistoryResortPost(resortSearchHistoryRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSearchHistoryFlightPost operation in SearchHistoryApi.
 * @export
 * @interface SearchHistoryApiApiSearchHistoryFlightPostRequest
 */
export interface SearchHistoryApiApiSearchHistoryFlightPostRequest {
    /**
     * 
     * @type {FlightSearchHistoryRequest}
     * @memberof SearchHistoryApiApiSearchHistoryFlightPost
     */
    readonly flightSearchHistoryRequest?: FlightSearchHistoryRequest
}

/**
 * Request parameters for apiSearchHistoryHotelPost operation in SearchHistoryApi.
 * @export
 * @interface SearchHistoryApiApiSearchHistoryHotelPostRequest
 */
export interface SearchHistoryApiApiSearchHistoryHotelPostRequest {
    /**
     * 
     * @type {HotelSearchHistoryRequest}
     * @memberof SearchHistoryApiApiSearchHistoryHotelPost
     */
    readonly hotelSearchHistoryRequest?: HotelSearchHistoryRequest
}

/**
 * Request parameters for apiSearchHistoryResortPost operation in SearchHistoryApi.
 * @export
 * @interface SearchHistoryApiApiSearchHistoryResortPostRequest
 */
export interface SearchHistoryApiApiSearchHistoryResortPostRequest {
    /**
     * 
     * @type {ResortSearchHistoryRequest}
     * @memberof SearchHistoryApiApiSearchHistoryResortPost
     */
    readonly resortSearchHistoryRequest?: ResortSearchHistoryRequest
}

/**
 * SearchHistoryApi - object-oriented interface
 * @export
 * @class SearchHistoryApi
 * @extends {BaseAPI}
 */
export class SearchHistoryApi extends BaseAPI {
    /**
     * 
     * @param {SearchHistoryApiApiSearchHistoryFlightPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryFlightPost(requestParameters: SearchHistoryApiApiSearchHistoryFlightPostRequest = {}, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryFlightPost(requestParameters.flightSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchHistoryApiApiSearchHistoryHotelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryHotelPost(requestParameters: SearchHistoryApiApiSearchHistoryHotelPostRequest = {}, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryHotelPost(requestParameters.hotelSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchHistoryApiApiSearchHistoryResortPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchHistoryApi
     */
    public apiSearchHistoryResortPost(requestParameters: SearchHistoryApiApiSearchHistoryResortPostRequest = {}, options?: any) {
        return SearchHistoryApiFp(this.configuration).apiSearchHistoryResortPost(requestParameters.resortSearchHistoryRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
