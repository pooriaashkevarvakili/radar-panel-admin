/* tslint:disable */
/* eslint-disable */
/**
 * User
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: User
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { LoginRequestDto } from '../model';
// @ts-ignore
import { LoginResponseDto } from '../model';
// @ts-ignore
import { OtpLoginRequestDto } from '../model';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginGetSmsTokenPhoneGet: async (phone: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'phone' is not null or undefined
            assertParamExists('apiLoginGetSmsTokenPhoneGet', 'phone', phone)
            const localVarPath = `/api/Login/GetSmsToken/{phone}`
                .replace(`{${"phone"}}`, encodeURIComponent(String(phone)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifySmsPost: async (otpLoginRequestDto?: OtpLoginRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/VerifySms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(otpLoginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifyUserNamePost: async (loginRequestDto?: LoginRequestDto, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Login/VerifyUserName`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginGetSmsTokenPhoneGet(phone: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginGetSmsTokenPhoneGet(phone, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginVerifySmsPost(otpLoginRequestDto?: OtpLoginRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginVerifySmsPost(otpLoginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiLoginVerifyUserNamePost(loginRequestDto?: LoginRequestDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiLoginVerifyUserNamePost(loginRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @param {string} phone 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginGetSmsTokenPhoneGet(phone: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiLoginGetSmsTokenPhoneGet(phone, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OtpLoginRequestDto} [otpLoginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifySmsPost(otpLoginRequestDto?: OtpLoginRequestDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.apiLoginVerifySmsPost(otpLoginRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginRequestDto} [loginRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiLoginVerifyUserNamePost(loginRequestDto?: LoginRequestDto, options?: any): AxiosPromise<LoginResponseDto> {
            return localVarFp.apiLoginVerifyUserNamePost(loginRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiLoginGetSmsTokenPhoneGet operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginGetSmsTokenPhoneGetRequest
 */
export interface LoginApiApiLoginGetSmsTokenPhoneGetRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginApiApiLoginGetSmsTokenPhoneGet
     */
    readonly phone: string
}

/**
 * Request parameters for apiLoginVerifySmsPost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginVerifySmsPostRequest
 */
export interface LoginApiApiLoginVerifySmsPostRequest {
    /**
     * 
     * @type {OtpLoginRequestDto}
     * @memberof LoginApiApiLoginVerifySmsPost
     */
    readonly otpLoginRequestDto?: OtpLoginRequestDto
}

/**
 * Request parameters for apiLoginVerifyUserNamePost operation in LoginApi.
 * @export
 * @interface LoginApiApiLoginVerifyUserNamePostRequest
 */
export interface LoginApiApiLoginVerifyUserNamePostRequest {
    /**
     * 
     * @type {LoginRequestDto}
     * @memberof LoginApiApiLoginVerifyUserNamePost
     */
    readonly loginRequestDto?: LoginRequestDto
}

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @param {LoginApiApiLoginGetSmsTokenPhoneGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginGetSmsTokenPhoneGet(requestParameters: LoginApiApiLoginGetSmsTokenPhoneGetRequest, options?: any) {
        return LoginApiFp(this.configuration).apiLoginGetSmsTokenPhoneGet(requestParameters.phone, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginVerifySmsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginVerifySmsPost(requestParameters: LoginApiApiLoginVerifySmsPostRequest = {}, options?: any) {
        return LoginApiFp(this.configuration).apiLoginVerifySmsPost(requestParameters.otpLoginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginApiApiLoginVerifyUserNamePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public apiLoginVerifyUserNamePost(requestParameters: LoginApiApiLoginVerifyUserNamePostRequest = {}, options?: any) {
        return LoginApiFp(this.configuration).apiLoginVerifyUserNamePost(requestParameters.loginRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
